
Here are the PromQL queries to get operation timings for iterations and specific package operations:

• Time Taken for Each Operation per Iteration
# Basic operation duration
porch_operation_duration_seconds_sum{operation="Create PackageRevision"}

# Detailed breakdown by operation
sum by (operation) (porch_operation_duration_seconds_sum)

# Operation duration with package and repository context
sum by (operation, package, repository) (porch_operation_duration_seconds_sum)

# Latest operation durations
sort_desc(porch_operation_duration_seconds_sum)


• Specific Package Revision Operations
# Time taken for specific package revision creation
porch_operation_duration_seconds_sum{operation="Create PackageRevision", package="test-package-0"}

# Time for package to move to proposed state
porch_operation_duration_seconds_sum{operation="Update to Proposed", package="test-package-0"}

# Time for package to move to published state
porch_operation_duration_seconds_sum{operation="Update to Published", package="test-package-0"}

# Time taken for package deletion
porch_operation_duration_seconds_sum{operation="Delete PackageRevision", package="test-package-0"}


• Comparative Analysis
# Compare durations across different operations for same package
sum by (operation) (
    porch_operation_duration_seconds_sum{package="test-package-0"}
)

# Average duration per operation type
rate(porch_operation_duration_seconds_sum[5m]) / rate(porch_operation_duration_seconds_count[5m])

# Operation duration distribution
histogram_quantile(0.95, 
    sum by (le, operation) (
        rate(porch_operation_duration_seconds_bucket{package="test-package-0"}[5m])
    )
)


• Time Series Analysis
# Operation duration over time
rate(porch_operation_duration_seconds_sum{operation="Create PackageRevision"}[5m])

# Compare operation times across iterations
sum by (operation) (
    increase(porch_operation_duration_seconds_sum[1h])
)


• Success/Failure Analysis
# Duration of successful operations
porch_operation_duration_seconds_sum{status="success", operation="Create PackageRevision"}

# Duration of failed operations
porch_operation_duration_seconds_sum{status="error", operation="Create PackageRevision"}


Example Usage:


• For a specific package operation:
# Get exact duration for creating package "test-package-0"
porch_operation_duration_seconds_sum{
    operation="Create PackageRevision",
    package="test-package-0",
    repository="porch-metrics-test-0"
}

# Get full lifecycle timing for package "test-package-0"
sum by (operation) (
    porch_operation_duration_seconds_sum{
        package="test-package-0",
        repository="porch-metrics-test-0"
    }
)


2. For iteration analysis:
# Get timing for all operations in latest iteration
sum by (operation, package) (
    porch_operation_duration_seconds_sum{
        repository="porch-metrics-test-0"
    }
)

# Compare operation durations across iterations
rate(porch_operation_duration_seconds_sum[5m]) 
    / 
rate(porch_operation_duration_seconds_count[5m])


• For specific operation analysis:
# Detailed timing for package state transitions
sum by (operation) (
    porch_operation_duration_seconds_sum{
        operation=~"Update to.*",
        package="test-package-0"
    }
)



